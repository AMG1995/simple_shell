/**
 * initializeInfo - Initializes the info_t struct
 * @info: Address of the struct to be initialized
 */
void initializeInfo(info_t *info)
{
    info->argument = NULL;
    info->argumentVector = NULL;
    info->commandPath = NULL;
    info->argumentCount = 0;
}

/**
 * populateInfo - Populates the info_t struct
 * @info: Address of the struct to be populated
 * @arguments: Argument vector (av)
 */
void populateInfo(info_t *info, char **arguments)
{
    int i = 0;

    info->programName = arguments[0];
    if (info->argument)
    {
        info->argumentVector = splitString(info->argument, " \t");
        if (!info->argumentVector)
        {
            info->argumentVector = malloc(sizeof(char *) * 2);
            if (info->argumentVector)
            {
                info->argumentVector[0] = duplicateString(info->argument);
                info->argumentVector[1] = NULL;
            }
        }
        for (i = 0; info->argumentVector && info->argumentVector[i]; i++)
            ;
        info->argumentCount = i;

        replaceAliases(info);
        replaceVariables(info);
    }
}

/**
 * freeInfo - Frees the fields of the info_t struct
 * @info: Address of the struct to be freed
 * @freeAll: True if freeing all fields
 */
void freeInfo(info_t *info, int freeAll)
{
    freeStringArray(info->argumentVector);
    info->argumentVector = NULL;
    info->commandPath = NULL;
    if (freeAll)
    {
        if (!info->commandBuffer)
            free(info->argument);
        if (info->environmentList)
            freeList(&(info->environmentList));
        if (info->historyList)
            freeList(&(info->historyList));
        if (info->aliasList)
            freeList(&(info->aliasList));
        freeStringArray(info->environment);
        info->environment = NULL;
        freeDoublePointer((void **)info->commandBuffer);
        if (info->readFileDescriptor > 2)
            close(info->readFileDescriptor);
        flushCharacterBuffer();
    }
}
